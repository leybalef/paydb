-- DROP SCHEMA sms;

CREATE SCHEMA sms AUTHORIZATION andrey;

-- DROP SEQUENCE sms.info_id_seq;

CREATE SEQUENCE sms.info_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;

-- Permissions

ALTER SEQUENCE sms.info_id_seq OWNER TO postgres;
GRANT ALL ON SEQUENCE sms.info_id_seq TO postgres;
GRANT ALL ON SEQUENCE sms.info_id_seq TO apis;

-- DROP SEQUENCE sms.syssms_id_seq;

CREATE SEQUENCE sms.syssms_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9223372036854775807
	START 1
	CACHE 1
	NO CYCLE;

-- Permissions

ALTER SEQUENCE sms.syssms_id_seq OWNER TO postgres;
GRANT ALL ON SEQUENCE sms.syssms_id_seq TO postgres;
GRANT ALL ON SEQUENCE sms.syssms_id_seq TO apis;
-- sms.info определение

-- Drop table

-- DROP TABLE sms.info;

CREATE TABLE sms.info (
	id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	templates jsonb NULL,
	"enable" bool NULL
);

-- Permissions

ALTER TABLE sms.info OWNER TO postgres;
GRANT ALL ON TABLE sms.info TO postgres;
GRANT UPDATE, INSERT, SELECT ON TABLE sms.info TO apis;
GRANT SELECT ON TABLE sms.info TO "AlekzP";


-- sms.syssms определение

-- Drop table

-- DROP TABLE sms.syssms;

CREATE TABLE sms.syssms (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	send varchar NULL,
	answer varchar NULL,
	status varchar NULL
);

-- Permissions

ALTER TABLE sms.syssms OWNER TO postgres;
GRANT ALL ON TABLE sms.syssms TO postgres;
GRANT UPDATE, INSERT, SELECT ON TABLE sms.syssms TO apis;
GRANT SELECT ON TABLE sms.syssms TO "AlekzP";


-- sms.users определение

-- Drop table

-- DROP TABLE sms.users;

CREATE TABLE sms.users (
	id_users varchar(255) NOT NULL,
	pass varchar(255) NULL,
	descriptions varchar(255) NULL,
	CONSTRAINT userssms_pkey PRIMARY KEY (id_users)
);

-- Permissions

ALTER TABLE sms.users OWNER TO postgres;
GRANT ALL ON TABLE sms.users TO postgres;
GRANT UPDATE, INSERT, SELECT ON TABLE sms.users TO apis;
GRANT SELECT ON TABLE sms.users TO "AlekzP";



-- DROP FUNCTION sms.f_ansoperator(json, int4);

CREATE OR REPLACE FUNCTION sms.f_ansoperator(answ json, nid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
 BEGIN
    UPDATE sms.syssms SET answer = answ WHERE id = nid ;
 END
$function$
;

-- Permissions

ALTER FUNCTION sms.f_ansoperator(json, int4) OWNER TO postgres;
GRANT ALL ON FUNCTION sms.f_ansoperator(json, int4) TO public;
GRANT ALL ON FUNCTION sms.f_ansoperator(json, int4) TO postgres;
GRANT ALL ON FUNCTION sms.f_ansoperator(json, int4) TO apis;
GRANT ALL ON FUNCTION sms.f_ansoperator(json, int4) TO "AlekzP";

-- DROP FUNCTION sms.f_api_users(bpchar);

CREATE OR REPLACE FUNCTION sms.f_api_users(xlogin character)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
    DECLARE xvalue json;
	BEGIN
	SELECT json_build_object('key',"id_users",'password',"pass") INTO xvalue FROM sms.users WHERE id_users = xlogin;
	RETURN xvalue;
	END;
$function$
;

-- Permissions

ALTER FUNCTION sms.f_api_users(bpchar) OWNER TO postgres;
GRANT ALL ON FUNCTION sms.f_api_users(bpchar) TO public;
GRANT ALL ON FUNCTION sms.f_api_users(bpchar) TO postgres;
GRANT ALL ON FUNCTION sms.f_api_users(bpchar) TO apis;
GRANT ALL ON FUNCTION sms.f_api_users(bpchar) TO "AlekzP";

-- DROP FUNCTION sms.f_check(json);

CREATE OR REPLACE FUNCTION sms.f_check(x_json json)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
	DECLARE xans JSON;
	DECLARE xans2 JSON;
	DECLARE xurl VARCHAR;
	DECLARE xurlx VARCHAR;
	DECLARE xdata VARCHAR;
    DECLARE xnewid INTEGER;
    DECLARE xamount VARCHAR;
    DECLARE xdate VARCHAR;
    DECLARE xkkt VARCHAR;
    DECLARE xphone VARCHAR;
	DECLARE xid INTEGER DEFAULT 1;
	DECLARE xtimestamp VARCHAR;
	--input data:
	--{
    --"amount": "300",
    --"data":"21.07.2023 21:11",
    --"kkt":"2784681053779",
    --"url":"check.ofd.ru/rec/7284440500019011/17232/2837128389"
	--"phone": "+79181234567",
    --}
BEGIN
	--xtimestamp := jsonb_build_object('timestamp',common.f_timestamp());
	xamount := x_json::jsonb ->> 'amount';
	xdate := x_json::jsonb ->> 'data';
	xkkt := x_json::jsonb ->> 'kkt';
	xurlx := x_json::jsonb ->> 'url';
	xphone := x_json::jsonb ->> 'phone';
	SELECT templates ->> 'Url', templates ->> 'Check' INTO xurl, xdata FROM sms.info WHERE id = xid ;
    xdata := REPLACE(xdata , 'xamountx', xamount);
    xdata := REPLACE(xdata , 'xdatax', xdate);
    xdata := REPLACE(xdata , 'xkktx', xkkt);  
    xdata := REPLACE(xdata , 'xurlx', xurlx);   
    xdata := REPLACE(xdata , '@phone', xphone::text);
    xdata := jsonb_build_object('Body', xdata::jsonb);
	INSERT INTO sms.syssms (send) VALUES (xdata ) RETURNING id INTO xnewid;
    xans2 := jsonb_build_object('Url', xurl,'newid',xnewid ) ;
    xans := xans2::jsonb || xdata::jsonb ;
  RETURN xans;
END;
--output data:
--{
--{"Url": "https://new.smsgorod.ru/apiSms/create", 
--"Body": {"sms": {"text": "Чек на %d руб. от %d. KKT %d: %w,  moatp.ru", "phone": "79181234567", "sender": "VIRTA", "channel": "char"}, 
--"apiKey": "W4RtBOyBlPmVMshbxDem4Z62ZR5qTIIb0jBbPl0kxCGZ5e42"}, "newid": 5}
--}
$function$
;

-- Permissions

ALTER FUNCTION sms.f_check(json) OWNER TO postgres;
GRANT ALL ON FUNCTION sms.f_check(json) TO public;
GRANT ALL ON FUNCTION sms.f_check(json) TO postgres;
GRANT ALL ON FUNCTION sms.f_check(json) TO apis;
GRANT ALL ON FUNCTION sms.f_check(json) TO "AlekzP";

-- DROP FUNCTION sms.f_data(json);

CREATE OR REPLACE FUNCTION sms.f_data(x_json json)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
	DECLARE xans JSON;
	DECLARE xans2 JSON;
	DECLARE xurl VARCHAR;
	DECLARE xdata VARCHAR;
    DECLARE xnewid INTEGER;
    DECLARE xcode VARCHAR;
    DECLARE xphone VARCHAR;
	DECLARE xtemp INTEGER DEFAULT 1;
	DECLARE xtimestamp VARCHAR;
	--input data:
	--{
    --"code": "1234",
	--"phone": "+79181234567",
    --}
BEGIN
	--xtimestamp := jsonb_build_object('timestamp',common.f_timestamp());
	xcode := x_json::jsonb ->> 'code';
	xphone := x_json::jsonb ->> 'phone';
	SELECT templates ->> 'Url', templates ->> 'Data' INTO xurl, xdata FROM sms.info WHERE id = xtemp ;
    xdata := REPLACE(xdata , 'xcodex', xcode);
    xdata := REPLACE(xdata , '@phone', xphone::text);
    xdata := jsonb_build_object('Body', xdata::jsonb);
	INSERT INTO sms.syssms (send) VALUES (xdata ) RETURNING id INTO xnewid;
    xans2 := jsonb_build_object('Url', xurl,'newid',xnewid ) ;
    xans := xans2::jsonb || xdata::jsonb ;
  RETURN xans;
END;
--output data:
--{
--{"Url": "https://new.smsgorod.ru/apiSms/create", 
--"Body": {"sms": {"text": "Ваш проверочный код 1234 ,  moatp.ru", "phone": "79181234567", "sender": "VIRTA", "channel": "char"}, 
--"apiKey": "W4RtBOyBlPmVMshbxDem4Z62ZR5qTIIb0jBbPqzixCGZ5e42"}, "newid": 5}
--}
$function$
;

-- Permissions

ALTER FUNCTION sms.f_data(json) OWNER TO postgres;
GRANT ALL ON FUNCTION sms.f_data(json) TO public;
GRANT ALL ON FUNCTION sms.f_data(json) TO postgres;
GRANT ALL ON FUNCTION sms.f_data(json) TO apis;
GRANT ALL ON FUNCTION sms.f_data(json) TO "AlekzP";

-- DROP FUNCTION sms.f_status(json);

CREATE OR REPLACE FUNCTION sms.f_status(x_json json)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
	DECLARE xans JSON;
	DECLARE xans2 JSON;
	DECLARE xsmsid JSON;
	DECLARE xurl VARCHAR;
	DECLARE xdata VARCHAR;
    DECLARE xxid INTEGER;
	DECLARE xid INTEGER DEFAULT 1;
	DECLARE xtimestamp VARCHAR;
	--input data:
	--{
    --"id": 1234
    --}
BEGIN
	--xtimestamp := jsonb_build_object('timestamp',common.f_timestamp());
	xxid := x_json::jsonb ->> 'id';
	SELECT templates ->> 'UrlStatus', templates ->> 'BodyStatus' INTO xurl, xdata FROM sms.info WHERE id = xid ;
    xsmsid := jsonb_build_object('apiSmsIdList', xxid::numeric);
    xdata := xdata::jsonb || xsmsid::jsonb ; 
    xdata := jsonb_build_object('Body', xdata::jsonb);
    xans2 := jsonb_build_object('Url', xurl ) ;
    xans := xans2::jsonb || xdata::jsonb ;
   RETURN xans;
   
END;
--output data:
--{
--{"Url": "https://new.smsgorod.ru/apiSms/get", 
--"Body": {}, 
--"apiKey": "W4RtBOyBlPmVMshbxDem4Z62ZR5qTIIb0jBbPl0k4sAu7ags6q42"}}
--}
$function$
;

-- Permissions

ALTER FUNCTION sms.f_status(json) OWNER TO postgres;
GRANT ALL ON FUNCTION sms.f_status(json) TO public;
GRANT ALL ON FUNCTION sms.f_status(json) TO postgres;
GRANT ALL ON FUNCTION sms.f_status(json) TO apis;
GRANT ALL ON FUNCTION sms.f_status(json) TO "AlekzP";


-- Permissions

GRANT ALL ON SCHEMA sms TO andrey;
GRANT USAGE ON SCHEMA sms TO apis;
GRANT USAGE ON SCHEMA sms TO "AlekzP";